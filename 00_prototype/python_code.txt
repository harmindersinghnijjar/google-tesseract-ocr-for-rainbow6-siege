"auto_report_death_location.py" : "import json
import os
import time
import random
import tkinter
import pytesseract
import pyautogui
import keyboard
from PIL import Image, ImageEnhance
import cv2
import numpy as np
import tkinter as tk

# Set the path to the Tesseract executable
# You need to adjust this path depending on your system
pytesseract.pytesseract.tesseract_cmd = r"C:\Program Files\Tesseract-OCR\tesseract.exe"

# Function to handle mouse clicks
def on_click(event):
    # Get the coordinates of the click
    x, y = event.x, event.y
    # Process the coordinates (you can add your logic here)
    # For example: death_coordinates.append((x, y))

def on_release(event):
    # Perform any actions needed on mouse release (if required)
    pass

# Load the coordinates
with open('feed_coordinates.txt', 'r') as f:
    death_coordinates = json.loads(f.read())

with open('location_coordinates.txt', 'r') as f:
    location_coordinates = json.loads(f.read())

# Function to perform OCR on a specific region of the screen
def ocr_region(coordinates, save_screenshot=False, screenshot_path=None):
    x1, y1 = coordinates[0]
    x2, y2 = coordinates[1]
    screenshot = pyautogui.screenshot(region=(x1, y1, x2 - x1, y2 - y1))

    # Convert the screenshot to grayscale
    image = cv2.cvtColor(np.array(screenshot), cv2.COLOR_RGB2GRAY)

    blur = cv2.GaussianBlur(image, (7,7), 0)
    thresh = cv2.threshold(blur, 0, 255, cv2.THRESH_BINARY_INV + cv2.THRESH_OTSU)[1]
    kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (5,2))
    opening = cv2.morphologyEx(thresh, cv2.MORPH_OPEN, kernel, iterations=3)
    # Save the processed image
    if save_screenshot and screenshot_path is not None:
        screenshot.save(screenshot_path)

    # Enlarge the image to improve OCR accuracy
    screenshot = screenshot.resize((screenshot.width * 2, screenshot.height * 2))

    try:
        text = pytesseract.image_to_string(screenshot)
    except pytesseract.TesseractError as e:
        print(f"Error during OCR: {e}")
        text = ""

    # Ignore ♀ character (Unicode code point U+2640)
    text = text.replace('♀', '')
    # Replace any non-alphanumeric characters with a space
    text = ''.join([c if c.isalnum() else ' ' for c in text])
    # Remove any leading or trailing spaces
    text = text.strip()
    # Remove any consecutive spaces
    text = ' '.join(text.split())


    return text

# Function to type a string using keyboard.press_and_release()
def type_string(string):
    keyboard.write(string, delay=0.001)

# Main loop
while True:
    # Perform OCR on the 'location' region
    location_text = ocr_region(location_coordinates, save_screenshot=True, screenshot_path="location_screenshot.png")

    # Perform OCR on the 'death' region
    death_text = ocr_region(death_coordinates)

    # If the specific text is detected, type out the location
    if "SpaceAgeGames" in death_text:
        print("Death detected")
        print("Opening team chat")
        keyboard.press_and_release('y')
        time.sleep(0.5)
        # Type out the location
        print("Typing location")
        type_string(location_text)
        time.sleep(0.5)
        keyboard.press_and_release('enter')
        time.sleep(5)

    else:
        print(f"Death not detected, current location: {location_text}")

    # Wait for 0.5 seconds to avoid overwhelming the system
    time.sleep(0.5)
",
"get_bbox_coordinates.py" : "import os
import tkinter as tk
import json

# The coordinates of the bounding box for death_coordinates
death_coordinates = []

def on_click(event):
    # Record the coordinates when the mouse button is pressed
    death_coordinates.append((event.x, event.y))

def on_release(event):
    # Record the coordinates when the mouse button is released
    death_coordinates.append((event.x, event.y))

    # Save the coordinates to death_coordinates file
    with open('death_coordinates.txt', 'w') as f:
        f.write(json.dumps(death_coordinates))

    # Quit the program after the box has been drawn
    root.quit()

if not os.path.exists('death_coordinates.txt'):
    root = tk.Tk()
    root.attributes('-fullscreen', True, '-alpha', 0.3)

    canvas = tk.Canvas(root)
    canvas.pack(fill="both", expand=True)

    canvas.bind("<Button-1>", on_click)
    canvas.bind("<ButtonRelease-1>", on_release)

    root.mainloop()

# The coordinates of the bounding box for location_coordinates
location_coordinates = []

def on_click(event):
    # Record the coordinates when the mouse button is pressed
    location_coordinates.append((event.x, event.y))

def on_release(event):
    # Record the coordinates when the mouse button is released
    location_coordinates.append((event.x, event.y))

    # Save the coordinates to location_coordinates file
    with open('location_coordinates.txt', 'w') as f:
        f.write(json.dumps(location_coordinates))

    # Quit the program after the box has been drawn
    root.quit()

if not os.path.exists('location_coordinates.txt'):
    root = tk.Tk()
    root.attributes('-fullscreen', True, '-alpha', 0.3)

    canvas = tk.Canvas(root)
    canvas.pack(fill="both", expand=True)

    canvas.bind("<Button-1>", on_click)
    canvas.bind("<ButtonRelease-1>", on_release)

    root.mainloop()
",
"keyboard_pressed_2_code.py" : "import keyboard

# Define the key to start and stop recording
record_key = 'r'

# List to store recorded actions
recorded_actions = []

# Flag to indicate whether recording is in progress
recording = False

def on_key_press(event):
    global recording
    global recorded_actions
    
    if event.name == record_key:
        recording = not recording
        if recording:
            recorded_actions.clear()
            print("Started recording")
        else:
            print("Stopped recording")

    # If recording is in progress, record the key press
    if recording:
        recorded_actions.append(event.name)
    
# Start the listener to monitor keypresses
keyboard.on_press(on_key_press)

print(f"Press '{record_key}' to start/stop recording.")

try:
    while True:
        pass
except KeyboardInterrupt:
    pass

print("Recorded actions:")
print(recorded_actions)
",
"screen_ocr_clipboard.py" : "import os
import tkinter as tk
import pyautogui
import json
import pytesseract
import pyperclip
import time

# The coordinates of the bounding box
coordinates = []

def on_click(event):
    # Record the coordinates when the mouse button is pressed
    coordinates.append((event.x, event.y))

def on_release(event):
    # Record the coordinates when the mouse button is released
    coordinates.append((event.x, event.y))

    # Save the coordinates to a file
    with open('coordinates.txt', 'w') as f:
        f.write(json.dumps(coordinates))

    # Quit the program after the box has been drawn
    root.quit()

if not os.path.exists('coordinates.txt'):
    root = tk.Tk()
    root.attributes('-fullscreen', True, '-alpha', 0.3)

    canvas = tk.Canvas(root)
    canvas.pack(fill="both", expand=True)

    canvas.bind("<Button-1>", on_click)
    canvas.bind("<ButtonRelease-1>", on_release)

    root.mainloop()

# Load the coordinates
with open('coordinates.txt', 'r') as f:
    coordinates = json.loads(f.read())

# Set the path to the tesseract executable
# You may need to adjust this path depending on your system
pytesseract.pytesseract.tesseract_cmd = r"C:\Program Files\Tesseract-OCR\tesseract.exe"

# Continuously screenshot the area, perform OCR, and copy the results to the clipboard
while True:
    x1, y1 = coordinates[0]
    x2, y2 = coordinates[1]
    screenshot = pyautogui.screenshot(region=(x1, y1, x2 - x1, y2 - y1))
    text = pytesseract.image_to_string(screenshot)
    if text != '' and text != '':
        print(text)
        pyperclip.copy(text)
    

    # Sleep for a bit to avoid overwhelming your system
    time.sleep(2)
",
